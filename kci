#!/usr/bin/env python3
#
# Copyright (C) 2017 Linaro Limited
# Author: Matt Hart <matthew.hart@linaro.org>
#
# Copyright (C) 2017, 2018 Collabora Ltd
# Author: Guillaume Tucker <guillaume.tucker@collabora.com>
#
# This module is free software; you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; either version 2.1 of the License, or (at your option)
# any later version.
#
# This library is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

"""Create a new lab entry."""

import json
import requests
import sys
import kci_admin.lab
import kci_admin.token


def dump_dict(d, indent='  ', level=1):
    indent_str = indent * level
    n = 24 - len(indent_str)
    fmt = "{{}}{{:{n}s}} {{}}".format(n=n)
    for k, v in d.items():
        if isinstance(v, dict):
            print(''.join([indent_str, k]))
            dump_dict(v, indent, level+1)
        else:
            print(fmt.format(indent_str, k, v))


def post_if_not_dry(dry, url, headers, data):
    if dry:
        print("Dry run - not sending any request")
        print("URL: {}".format(url))
        print(headers)
        print(data)
    else:
        response = requests.post(url, headers=headers, data=data)
        response.raise_for_status()
        print("Response:")
        dump_dict(json.loads(response.content.decode('utf8'))['result'][0])


def cmd_add_lab(args):
    parser = kci_admin.lab.parser_create()
    args = parser.parse_args(args)
    opts = {o: getattr(args, o) for o in
            ['lab_name', 'first_name', 'last_name', 'email']}
    req = kci_admin.lab.request_create(args.host, opts)
    post_if_not_dry(args.dry, *req)
cmd_add_lab.description = kci_admin.lab.description_create


def cmd_list_labs(args):
    parser = kci_admin.lab.parser_list()
    args = parser.parse_args(args)
    labs = kci_admin.lab.get_list(args.host)
    for lab in labs:
        lab_name = lab.pop('name')
        if args.lab_name and args.lab_name != lab_name:
            continue
        print(lab_name)
        dump_dict(lab)
        print()
cmd_list_labs.description = kci_admin.lab.description_get_list


def cmd_add_token(args):
    parser = kci_admin.token.parser_create()
    args = parser.parse_args(args)
    opts = {o: getattr(args, o) for o in
            ['username', 'email']}
    req = kci_admin.token.request_create(args.host, opts)
    post_if_not_dry(args.dry, *req)
cmd_add_token.description = kci_admin.token.description_create


def cmd_list_tokens(args):
    parser = kci_admin.token.parser_list()
    args = parser.parse_args(args)
    tokens = kci_admin.token.get_list(args.host)
    for token in tokens:
        username = token.pop('username')
        if args.username and args.username != username:
            continue
        print(username)
        dump_dict(token)
        print()
cmd_list_tokens.description = kci_admin.token.description_get_list


def main(argv):
    cmds = {}
    for name, obj in globals().items():
        parsed = name.split('cmd_')
        if len(parsed) != 2:
            continue
        cmds[parsed[1]] = obj
    cmd = cmds.get(argv[0]) if len(argv) else None
    if cmd is None:
        print("""\
Invalid command.

Usage:
  kci COMMAND <OPTIONS>

Available commands:\
""")
        for name, func in cmds.items():
            print("  {:16s} {}".format(name, func.description))
        sys.exit(1)
    cmd(argv[1:])


if __name__ == "__main__":
    main(sys.argv[1:])
